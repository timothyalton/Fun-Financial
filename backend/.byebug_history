continue
@user.credit_line
@user.credit_limit
@user.wallet
@user.credit_score
@user.creditscore
@user.family
@user
continue
@user
continue
@user.family
@user
continue
@user.family
continue
@family
@user
continue
@user.wallet
@user.family
@wallet
@user
continue
user_params
continue
User.all
Family.all
@family
@user
continue
@family
@user
continue
@family
@user
@wallet
continue
@user
continue
@user
@wallet
@family
exit
@user
continue
@user
@family
@wallet
continue
@user
@family
@wallet
continue
@wallet
continue
@wallet
@family
continue
@wallet
@family
continue
@wallet
@family
continue
@family
@wallet
Wallet
continue
JWT.decode(token, "dirty_little_secret")
token
token = JWT.encode(payload, "dirty_little_secret", "HS256")
JWT.encode(payload, "secret key")
JWT
payload
u.authenticate(params[:password])
u
u = User.find_by(username: params[:username])
User.find_by(username: params[:username])
params
continue
params
continue
user_params
continue
user_params
params
continue
@user.valid?
continue
user_params
params
exit
params
user_params
@user.errors.messages
@user.valid?
@family
@user
continue
user_params
exit
user_params
@family
exit
@user.family_id
@family
@user.valid?
@user
exit
eixt
@family
@user
continue
exit
@user.family_id
@family
@families
@user
@user.family.id
@user.family_id
@family
continue
@families
continue
@families
exit
continue
@families
exit
continue
@families
Family.all
@family.all
@family
continue
@family
@user.family_id
continue
@family
@user.family_id
@user.valid?
user_params
continue
@user.family_id
@user.family.id
user.family.id
user_params
continue
user_params
continue
@user
@usesr
@family
user_params
continue
params
exit 
Create!
f1
c1
continue
user_params
params
continue
UserSerializer.new(@user)
UserSerializer
continue
user_params
params
@user
continue
params
user_params
continue
user_params
@user
continue
user_params
@user
